/**
 * Minified by jsDelivr using Terser v5.14.1.
 * Original file: /npm/bootstrap@5.2.1/js/dist/util/config.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
/*!
  * Bootstrap config.js v5.2.1 (https://getbootstrap.com/)
  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("./index"),require("../dom/manipulator")):"function"==typeof define&&define.amd?define(["./index","../dom/manipulator"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).Config=t(e.Index,e.Manipulator)}(this,(function(e,t){"use strict";const o=(e=>e&&"object"==typeof e&&"default"in e?e:{default:e})(t);return class{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(t,n){const i=e.isElement(n)?o.default.getDataAttribute(n,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...e.isElement(n)?o.default.getDataAttributes(n):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,o=this.constructor.DefaultType){for(const n of Object.keys(o)){const i=o[n],r=t[n],f=e.isElement(r)?"element":e.toType(r);if(!new RegExp(i).test(f))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${f}" but expected type "${i}".`)}}}}));
//# sourceMappingURL=/sm/d21368cd46303bb693bbeff9c0a00b3b06e3a100c043fd4d75fd8e6bdccec995.map